def preprocess_json_file(file_path):
    """Preprocess the JSON file to remove unwanted newlines within JSON objects."""
    logger.debug(f"Starting preprocess_json_file for file: {file_path}")

    try:
        with open(file_path, 'r') as file:
            # Read the entire file content
            lines = file.readlines()

        # Initialize variables to store processed content
        combined_lines = []
        current_object = ""

        # Process each line to combine broken JSON objects
        for line in lines:
            line = line.strip()
            if line:  # Only process non-empty lines
                current_object += line
                if line.endswith('}'):  # End of a JSON object
                    combined_lines.append(current_object)
                    current_object = ""  # Reset for the next JSON object

        # Join all JSON objects into a single array
        content = "[" + ",".join(combined_lines) + "]"

        with open(file_path, 'w') as file:
            file.write(content)

        logger.debug(f"Completed preprocess_json_file for file: {file_path}")

    except Exception as e:
        logger.error(f"Error preprocessing JSON file {file_path}: {e}")

def combine_json_data(file_paths):
    """Combine JSON data from multiple files after preprocessing to ensure valid JSON format."""
    logger.debug(f"Starting combine_json_data for files: {file_paths}")
    combined_data = []

    for file_path in file_paths:
        # Preprocess each file to fix JSON format
        preprocess_json_file(file_path)

        try:
            with open(file_path, 'r') as file:
                json_data = json.load(file)  # Load the entire file content as a single JSON array
                combined_data.extend(json_data)

        except Exception as e:
            logger.error(f"Error combining JSON data from {file_path}: {e}")

    logger.debug(f"Completed combine_json_data for files: {file_paths}")
    return combined_data
